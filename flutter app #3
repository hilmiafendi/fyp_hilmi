import 'dart:async';
import 'dart:convert';
//import 'dart:math'; // Import this for generating random numbers
import 'package:fl_chart/fl_chart.dart';
import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;

void main() => runApp(MyApp());

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      theme: ThemeData.dark(),
      home: IntroScreen(),
    );
  }
}

class IntroScreen extends StatefulWidget {
  @override
  _IntroScreenState createState() => _IntroScreenState();
}

class _IntroScreenState extends State<IntroScreen> {
  final List<String> slideTitles = [
    'Real-time Traffic Data',
    'Highway Congestion Monitoring',
    'Smart Streetlight Management',
  ];

  final List<String> slideDescriptions = [
    'Access real-time traffic data to monitor traffic flow and congestion on highways.',
    'Monitor congestion levels on highways to improve traffic management and reduce delays.',
    'Efficiently manage streetlights based on traffic data to save energy and enhance safety.',
  ];

  final PageController _pageController = PageController();
  int _currentPage = 0;

  @override
  void initState() {
    super.initState();
    _pageController.addListener(() {
      setState(() {
        _currentPage = _pageController.page!.round();
      });
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.white,
      body: Stack(
        children: [
          GestureDetector(
            onTap: () {
              final screenWidth = MediaQuery.of(context).size.width;
              final tapPosition = MediaQuery.of(context).size.width / 2;

              if (tapPosition > screenWidth / 2 &&
                  _currentPage < slideTitles.length - 1) {
                setState(() {
                  _currentPage++;
                });
              } else if (tapPosition < screenWidth / 2 && _currentPage > 0) {
                setState(() {
                  _currentPage--;
                });
              } else if (_currentPage == slideTitles.length - 1) {
                Navigator.push(
                  context,
                  MaterialPageRoute(builder: (context) => OptionsScreen()),
                );
              }
              _pageController.animateToPage(
                _currentPage,
                duration: Duration(milliseconds: 500),
                curve: Curves.easeInOut,
              );
            },
            child: PageView.builder(
              controller: _pageController,
              itemCount: slideTitles.length,
              itemBuilder: (BuildContext context, int index) {
                if (index < slideTitles.length - 1) {
                  return IntroSlide(
                    title: slideTitles[index],
                    description: slideDescriptions[index],
                    imageUrl:
                        'https://images.unsplash.com/photo-1565725001033-adccc84507e0?q=80&w=987&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D',
                    opacity: 0.5,
                  );
                } else {
                  return LastSlide(
                    onTap: () {
                      Navigator.push(
                        context,
                        MaterialPageRoute(
                            builder: (context) => OptionsScreen()),
                      );
                    },
                  );
                }
              },
            ),
          ),
          Align(
            alignment: Alignment.bottomCenter,
            child: Padding(
              padding: const EdgeInsets.only(bottom: 16.0),
              child: Row(
                mainAxisAlignment: MainAxisAlignment.center,
                children: List.generate(
                  slideTitles.length,
                  (index) => Container(
                    margin: EdgeInsets.symmetric(horizontal: 4.0),
                    width: 8.0,
                    height: 8.0,
                    decoration: BoxDecoration(
                      shape: BoxShape.circle,
                      color: _currentPage == index ? Colors.blue : Colors.grey,
                    ),
                  ),
                ),
              ),
            ),
          ),
        ],
      ),
    );
  }
}

class IntroSlide extends StatelessWidget {
  final String title;
  final String description;
  final String imageUrl;
  final double opacity;

  const IntroSlide({
    Key? key,
    required this.title,
    required this.description,
    required this.imageUrl,
    this.opacity = 1.0,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Container(
      child: Stack(
        children: [
          // Background image
          Container(
            decoration: BoxDecoration(
              image: DecorationImage(
                image: NetworkImage(imageUrl),
                fit: BoxFit.cover,
              ),
            ),
            child: Opacity(
              opacity: opacity,
              child: Container(
                color: Colors.black,
              ),
            ),
          ),
          // Slide content
          Container(
            padding: EdgeInsets.all(20.0),
            child: Column(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                Text(
                  title,
                  style: TextStyle(
                    fontSize: 24.0,
                    fontWeight: FontWeight.bold,
                    color: Colors.white,
                  ),
                ),
                SizedBox(height: 20.0),
                Text(
                  description,
                  style: TextStyle(
                    fontSize: 16.0,
                    color: Colors.white,
                  ),
                  textAlign: TextAlign.center,
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }
}

class LastSlide extends StatelessWidget {
  final VoidCallback onTap;

  const LastSlide({Key? key, required this.onTap}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Container(
      color: Colors.blue,
      padding: EdgeInsets.all(20.0),
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Text(
            'Let\'s Get Started',
            style: TextStyle(
              fontSize: 24.0,
              fontWeight: FontWeight.bold,
              color: Colors.white,
            ),
          ),
          SizedBox(height: 20.0),
          ElevatedButton(
            onPressed: onTap,
            style: ElevatedButton.styleFrom(
              padding: EdgeInsets.symmetric(horizontal: 40.0, vertical: 16.0),
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(30.0),
              ),
            ),
            child: Text(
              'Let\'s Get Started',
              style: TextStyle(
                fontSize: 16.0,
                fontWeight: FontWeight.bold,
              ),
            ),
          ),
        ],
      ),
    );
  }
}

class OptionsScreen extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Select Data Viewing Option'),
        backgroundColor: Colors.blue,
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            ElevatedButton(
              onPressed: () {
                Navigator.push(
                  context,
                  MaterialPageRoute(
                      builder: (context) => CarLiveCountsScreen()),
                );
              },
              child: Text('Car Live Counts'),
            ),
            SizedBox(height: 20), // Adjust the height to control the space
            ElevatedButton(
              onPressed: () {
                Navigator.push(
                  context,
                  MaterialPageRoute(builder: (context) => GraphScreen()),
                );
              },
              child: Text('Graph'),
            ),
          ],
        ),
      ),
    );
  }
}

class CarLiveCountsScreen extends StatefulWidget {
  @override
  _CarLiveCountsScreenState createState() => _CarLiveCountsScreenState();
}

class _CarLiveCountsScreenState extends State<CarLiveCountsScreen> {
  late Timer _timer;
  late Future<String>? _futureResponse; // Initialize as nullable
  late String _currentResponse = ''; // Initialize with an empty string

  @override
  void initState() {
    super.initState();
    _fetchData(); // Initial data fetch
    _timer = Timer.periodic(const Duration(seconds: 2), (Timer timer) {
      _fetchData(); // Fetch data every 2 seconds
    });
  }

  Future<void> _fetchData() async {
    try {
      final response = await sendMessageToNodeRed('');
      if (response != _currentResponse) {
        setState(() {
          _currentResponse = response;
          _futureResponse = Future.value(response);
        });
      }
    } catch (error) {
      print('Error: $error');
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Car Live Counts'),
      ),
      body: Container(
        alignment: Alignment.center,
        padding: const EdgeInsets.all(8),
        child: buildFutureBuilder(),
      ),
    );
  }

  FutureBuilder<String> buildFutureBuilder() {
    return FutureBuilder<String>(
      future: _futureResponse,
      builder: (context, snapshot) {
        if (snapshot.connectionState == ConnectionState.waiting) {
          return const CircularProgressIndicator();
        } else if (snapshot.hasData) {
          return Text('${snapshot.data}');
        } else if (snapshot.hasError) {
          return Text('Error: ${snapshot.error}');
        }

        return const SizedBox(); // Return an empty widget if none of the above conditions are met
      },
    );
  }

  @override
  void dispose() {
    _timer.cancel();
    super.dispose();
  }
}

Future<String> sendMessageToNodeRed(String message) async {
  final response = await http.post(
    Uri.parse(
        'http://192.168.19.163:1880/test'), // Change the URL to your Node-RED endpoint
    headers: <String, String>{
      'Content-Type': 'application/json; charset=UTF-8',
    },
    body: jsonEncode(<String, String>{
      'message': message,
    }),
  );

  if (response.statusCode == 200) {
    final vehicleCount = jsonDecode(response.body)['vehicleCount'];

    return vehicleCount.toString(); // Convert to String
  } else {
    throw Exception('Failed to send message to Node-RED.');
  }
}

class GraphScreen extends StatefulWidget {
  @override
  _GraphScreenState createState() => _GraphScreenState();
}

class _GraphScreenState extends State<GraphScreen> {
  bool isShowingMainData = true;
  List<FlSpot> spots = [];
  int previousCount = 0; // Track previous count
  int accumulatedCount = 0; // Accumulate the count differences
  Timer? fetchDataTimer;
  Timer? updateGraphTimer;
  final List<FlSpot> allSpots = []; // Store all spots for 1 minute trend

  @override
  void initState() {
    super.initState();

    // Timer to fetch data every 2 seconds
    fetchDataTimer =
        Timer.periodic(const Duration(seconds: 2), (Timer timer) async {
      try {
        final count = await fetchVehicleCount();
        setState(() {
          if (previousCount != 0) {
            // Accumulate the count differences
            accumulatedCount += (count - previousCount);
          }
          previousCount = count;
        });
      } catch (e) {
        print('Error fetching vehicle count: $e');
      }
    });

    // Timer to update graph data every 10 seconds
    updateGraphTimer =
        Timer.periodic(const Duration(seconds: 10), (Timer timer) {
      setState(() {
        final currentTime = DateTime.now().millisecondsSinceEpoch.toDouble();
        allSpots.add(FlSpot(currentTime / 1000, accumulatedCount.toDouble()));
        accumulatedCount = 0; // Reset the accumulated count
      });
    });

    // Timer to stop updating the graph after 1 minute
    Timer(const Duration(minutes: 1), () {
      setState(() {
        fetchDataTimer?.cancel();
        updateGraphTimer?.cancel();
      });
    });
  }

  Future<int> fetchVehicleCount() async {
    final response = await http.post(
      Uri.parse(
          'http://192.168.19.163:1880/test'), // Change the URL to your Node-RED endpoint
      headers: <String, String>{
        'Content-Type': 'application/json; charset=UTF-8',
      },
      body: jsonEncode(<String, String>{
        'message': 'getCount',
      }),
    );

    if (response.statusCode == 200) {
      final Map<String, dynamic> data = jsonDecode(response.body);
      return data['vehicleCount'] as int;
    } else {
      throw Exception('Failed to send message to Node-RED.');
    }
  }

  LineChartData get lineChartData => LineChartData(
        lineBarsData: [
          LineChartBarData(
            isCurved: true,
            color: Colors.blue,
            barWidth: 4,
            isStrokeCapRound: true,
            dotData: const FlDotData(show: false),
            belowBarData: BarAreaData(show: false),
            spots: allSpots,
          ),
        ],
        gridData: FlGridData(show: true),
        titlesData: FlTitlesData(
          leftTitles: AxisTitles(
            sideTitles: SideTitles(
              showTitles: true,
              getTitlesWidget: leftTitleWidgets,
            ),
          ),
          bottomTitles: AxisTitles(
            sideTitles: SideTitles(
              showTitles: true,
              getTitlesWidget: bottomTitleWidgets,
            ),
          ),
        ),
        borderData: FlBorderData(show: true),
      );

  Widget leftTitleWidgets(double value, TitleMeta meta) {
    const style = TextStyle(
      fontWeight: FontWeight.bold,
      fontSize: 14,
    );
    return Text(value.toInt().toString(),
        style: style, textAlign: TextAlign.center);
  }

  Widget bottomTitleWidgets(double value, TitleMeta meta) {
    const style = TextStyle(
      fontWeight: FontWeight.bold,
      fontSize: 14,
    );
    return Text(value.toInt().toString(),
        style: style, textAlign: TextAlign.center);
  }

  @override
  void dispose() {
    fetchDataTimer?.cancel();
    updateGraphTimer?.cancel();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Graph'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(8.0),
        child: Column(
          children: [
            const SizedBox(height: 37),
            const Text(
              'Live Counts',
              style: TextStyle(
                color: Colors.blue,
                fontSize: 32,
                fontWeight: FontWeight.bold,
                letterSpacing: 2,
              ),
              textAlign: TextAlign.center,
            ),
            const SizedBox(height: 37),
            Expanded(
              child: Padding(
                padding: const EdgeInsets.only(right: 16, left: 6),
                child: LineChart(lineChartData),
              ),
            ),
            const SizedBox(height: 10),
            IconButton(
              icon: Icon(
                Icons.refresh,
                color: Colors.blue.withOpacity(isShowingMainData ? 1.0 : 0.5),
              ),
              onPressed: () {
                setState(() {
                  isShowingMainData = !isShowingMainData;
                });
              },
            ),
          ],
        ),
      ),
    );
  }
}
